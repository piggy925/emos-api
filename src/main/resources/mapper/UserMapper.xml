<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mumu.emos.api.db.dao.UserMapper">
    <resultMap id="BaseResultMap" type="com.mumu.emos.api.db.pojo.User">
        <!--@mbg.generated-->
        <!--@Table tb_user-->
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="open_id" jdbcType="VARCHAR" property="openId"/>
        <result column="nickname" jdbcType="VARCHAR" property="nickname"/>
        <result column="photo" jdbcType="VARCHAR" property="photo"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="sex" jdbcType="OTHER" property="sex"/>
        <result column="tel" jdbcType="CHAR" property="tel"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="hiredate" jdbcType="DATE" property="hiredate"/>
        <result column="role" jdbcType="VARCHAR" property="role"/>
        <result column="root" jdbcType="BOOLEAN" property="root"/>
        <result column="dept_id" jdbcType="INTEGER" property="deptId"/>
        <result column="status" jdbcType="TINYINT" property="status"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    </resultMap>
    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        id, username, `password`, open_id, nickname, photo, `name`, sex, tel, email, hiredate,
        `role`, root, dept_id, `status`, create_time
    </sql>

    <select id="searchUserPermissions" parameterType="int" resultType="String">
        SELECT DISTINCT p.permission_name
        FROM tb_user u
        JOIN tb_role r ON JSON_CONTAINS(u.role, CAST(r.id AS char))
        JOIN tb_permission p ON JSON_CONTAINS(r.permissions, CAST(p.id AS char))
        WHERE u.id=#{userId} AND u.status=1;
    </select>

    <select id="login" resultType="java.lang.Integer" parameterType="hashmap">
        SELECT id FROM tb_user
        WHERE username = #{username}
        AND password = HEX(AES_ENCRYPT(#{password}, #{username}))
        LIMIT 1
    </select>

    <select id="searchUserSummary" parameterType="int" resultType="hashmap">
        SELECT u.name, u.photo, d.dept_name AS deptName
        FROM tb_user u LEFT JOIN tb_dept d ON u.dept_id=d.id
        WHERE u.id=#{userId} AND u.status=1
    </select>

    <update id="updatePassword" parameterType="hashmap">
        UPDATE tb_user
        SET password = HEX(AES_ENCRYPT(#{password}, username))
        WHERE id = #{userId}
    </update>

    <select id="validatePassword" resultType="integer" parameterType="hashmap">
        SELECT id
        FROM tb_user
        WHERE id = #{userId} AND password = HEX(AES_ENCRYPT(#{oldPassword}, username))
    </select>

    <select id="searchUserByPage" parameterType="HashMap" resultType="HashMap">
        SELECT DISTINCT u.id,
        u.name,
        u.sex,
        u.tel,
        u.email,
        d.dept_name AS dept,
        u.hiredate,
        u.root,
        u.status,
        (SELECT GROUP_CONCAT(role_name SEPARATOR ',')
        FROM tb_role
        WHERE JSON_CONTAINS(u.role, CONVERT(id, char)
        )) AS roles
        FROM tb_user u
        JOIN tb_role r ON JSON_CONTAINS(u.role, CONVERT(r.id, char))
        LEFT JOIN tb_dept d ON u.dept_id = d.id
        WHERE 1 = 1
        <if test="name != null">
            AND u.name LIKE '%${name}%'
        </if>
        <if test="sex != null">
            AND u.sex = #{sex}
        </if>
        <if test="role != null">
            AND r.role_name = #{role}
        </if>
        <if test="deptId != null">
            AND d.id = #{deptId}
        </if>
        <if test="status != null">
            AND u.status = #{status}
        </if>
        LIMIT #{start}, #{length}
    </select>

    <select id="searchUserCount" parameterType="HashMap" resultType="long">
        SELECT COUNT(DISTINCT u.id)
        FROM tb_user u
        JOIN tb_role r ON JSON_CONTAINS(u.role, CONVERT(r.id, char))
        WHERE 1 = 1
        <if test="name != null">
            AND u.name LIKE "%${name}%"
        </if>
        <if test="sex != null">
            AND u.sex = #{sex}
        </if>
        <if test="role != null">
            AND r.role_name = #{role}
        </if>
        <if test="deptId != null">
            AND u.dept_id = #{deptId}
        </if>
        <if test="status != null">
            AND u.status = #{status}
        </if>
    </select>

    <select id="searchUserInfo" parameterType="int" resultType="HashMap">
        SELECT u.open_id                                        AS openId,
               u.nickname,
               u.name,
               u.photo,
               u.sex,
               u.tel,
               u.email,
               d.dept_name                                      AS dept,
               u.hiredate,
               u.status,
               (SELECT GROUP_CONCAT(role_name SEPARATOR 'ï¼Œ')
                FROM tb_role
                WHERE JSON_CONTAINS(u.role, CONVERT(id, char))) AS roles
        FROM tb_user u
                LEFT JOIN tb_dept d ON u.dept_id = d.id
        WHERE u.id = #{userId}
          AND u.status = 1
    </select>

    <select id="searchDeptManagerId" parameterType="int" resultType="Integer">
        SELECT u2.id
        FROM tb_user u1
                JOIN tb_user u2 ON u1.dept_id = u2.dept_id
                JOIN tb_role r ON JSON_CONTAINS(u2.role, CAST(r.id AS char))
        WHERE u1.id = #{id}
          AND r.id = 2
          AND u1.status = 1
          AND u2.status = 1
        ORDER BY u2.create_time DESC
        LIMIT 1
    </select>
    
    <select id="searchGmId" resultType="Integer">
        SELECT u.id
        FROM tb_user u
                JOIN tb_role r ON JSON_CONTAINS(u.role, CAST(r.id AS char))
        WHERE r.id = 1
          AND u.status = 1
        ORDER BY u.create_time DESC
        LIMIT 1
    </select>

    <insert id="insert" parameterType="com.mumu.emos.api.db.pojo.User">
        INSERT INTO tb_user
        SET
        <if test="username != null">
            username = #{username},
        </if>
        <if test="password != null">
            password = HEX(AES_ENCRYPT(#{password},#{username})),
        </if>
        <if test="openId != null">
            open_id = #{openId},
        </if>
        <if test="nickname != null">
            nickname = #{nickname},
        </if>
        <if test="photo != null">
            photo = #{photo},
        </if>
        <if test="name != null">
            name = #{name},
        </if>
        <if test="sex != null">
            sex = #{sex},
        </if>
        <if test="tel != null">
            tel = #{tel},
        </if>
        <if test="email != null">
            email=#{email},
        </if>
        <if test="hiredate != null">
            hiredate = #{hiredate},
        </if>
        role = #{role},
        <if test="root != null">
            root = #{root},
        </if>
        <if test="deptId != null">
            dept_id = #{deptId},
        </if>
        status = #{status},
        create_time = #{createTime}
    </insert>

    <update id="update" parameterType="HashMap">
        UPDATE tb_user
        SET
        <if test="username != null and password != null">
            username = #{username},
            password = HEX(AES_ENCRYPT(#{password},#{username})),
        </if>
        <if test="name != null">
            name = #{name},
        </if>
        <if test="sex != null">
            sex = #{sex},
        </if>
        <if test="tel != null">
            tel = #{tel},
        </if>
        <if test="email != null">
            email = #{email},
        </if>
        <if test="hiredate != null">
            hiredate = #{hiredate},
        </if>
        <if test="role != null">
            role = #{role},
        </if>
        <if test="root != null">
            root = #{root},
        </if>
        <if test="deptId != null">
            dept_id = #{deptId},
        </if>
        <if test="status != null">
            status = #{status},
        </if>
        id=id
        WHERE id=#{userId}
    </update>

    <select id="searchById" parameterType="int" resultType="HashMap">
        SELECT id, username, name, sex, tel, email, hiredate, role, dept_id AS deptId, status,
        CAST(AES_DECRYPT(UNHEX(password),username) AS char) AS password
        FROM tb_user
        WHERE id=#{userId}
    </select>

    <delete id="deleteUserByIds">
        DELETE FROM tb_user
        WHERE id IN
        <foreach collection="array" open="(" close=")" separator="," item="item">
            #{item}
        </foreach>
        AND root = FALSE
    </delete>

    <select id="searchAllUser" resultType="HashMap">
        SELECT id, `name`
        FROM tb_user
        WHERE status = 1
    </select>

    <select id="searchUserRoles" parameterType="int" resultType="string">
        SELECT r.role_name AS roleName
        FROM tb_role r
        LEFT JOIN tb_user u ON JSON_CONTAINS(u.role, CAST(r.id AS char))
        WHERE u.id = #{userId}
    </select>

    <select id="searchNameAndDept" resultType="java.util.HashMap" parameterType="int">
        SELECT u.name, d.dept_name AS dept
        FROM tb_user u
        LEFT JOIN tb_dept d ON u.dept_id = d.id
        WHERE u.id = #{userId}
        AND u.status = '1'
    </select>
</mapper>